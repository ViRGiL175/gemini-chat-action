name: "Gemini chat Action"
description: "Chat with Gemini from your Actions"
branding:
  icon: "message-square"
  color: "blue"

inputs:
  gemini-api-key:
    description: "API key for Gemini"
    required: true
  text:
    description: "Text to send"
    required: true
  system-instruction:
    description: "Optional system-level instructions for the model. System instructions can be used to steer the model's behavior based on your specific needs and use cases by providing a natural language description of the task, including context, desired format, and/or examples."
    required: false

outputs:
  answer:
    description: "The answer generated"
    value: ${{ steps.provide-output.outputs.answer }}

runs:
  using: "composite"
  steps:
    - id: validate-inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.gemini-api-key }}" ]; then
          echo "‚ùå Error: gemini-api-key input is required."
          exit 1
        fi
        if [ -z "${{ inputs.text }}" ]; then
          echo "‚ùå Error: text input is required."
          exit 1
        fi
        # No validation for optional system-instruction here, jq will handle if it's malformed later if used.
        echo "‚úÖ All required inputs are present."

    - id: ensure-curl
      run: |
        # Install curl if it is missing
        if ! command -v curl &> /dev/null; then
          echo "üîç curl not found, installing..."
          if command -v apt-get &> /dev/null; then
            apt-get update && apt-get install -y curl
          elif command -v apk &> /dev/null; then
            apk add --no-cache curl
          else
            echo "‚ùå Failed to install curl. Please use a Docker image with curl pre-installed."
            exit 1
          fi
        else
          echo "‚úÖ curl is already installed, continuing..."
        fi
      shell: bash

    - id: ensure-jq
      run: |
        # Install jq if it is missing
        if ! command -v jq &> /dev/null; then
          echo "üîç jq not found, installing..."
          if command -v apt-get &> /dev/null; then
            apt-get update && apt-get install -y jq
          elif command -v apk &> /dev/null; then
            apk add --no-cache jq
          else
            echo "‚ùå Failed to install jq. Please use a Docker image with jq pre-installed."
            exit 1
          fi
        else
          echo "‚úÖ jq is already installed, continuing..."
        fi
      shell: bash

    - id: gemini-call
      env:
        GEMINI_API_KEY: ${{ inputs.gemini-api-key }}
        TEXT_CONTENT: ${{ inputs.text }}
        SYSTEM_INSTRUCTION_TEXT: ${{ inputs.system-instruction }}
      run: |
        # Create a temporary file to store the result
        gemini_response_file="${RUNNER_TEMP}/gemini_response.json"
        request_file="${RUNNER_TEMP}/request.json"

        # Base jq script for the main content
        base_payload_jq_script='{contents: [{parts: [{text: $text_content}]}]}'

        # Conditionally add system_instruction
        if [ -n "$SYSTEM_INSTRUCTION_TEXT" ]; then
          jq -n --arg text_content "$TEXT_CONTENT" --arg si_text "$SYSTEM_INSTRUCTION_TEXT" \
            "$base_payload_jq_script | . + {system_instruction: {parts: [{text: \$si_text}]}}" > "$request_file"
        else
          jq -n --arg text_content "$TEXT_CONTENT" \
            "$base_payload_jq_script" > "$request_file"
        fi

        # Execute the request and save the result directly to the file
        curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @"$request_file" > "$gemini_response_file"
      shell: bash

    - id: provide-output
      run: |
        # Read the result from the file
        gemini_response_file="${RUNNER_TEMP}/gemini_response.json"

        # Output the full formatted JSON response to the console
        echo "‚ú® Full Gemini API Response (JSON): ‚ú®"
        echo "------------------------------------------"
        if jq . "$gemini_response_file"; then
          echo "" # Add a newline for better separation if jq succeeds
        else
          echo "‚ö†Ô∏è Warning: jq command failed or response was not valid JSON. Displaying raw content:"
          cat "$gemini_response_file"
          echo "" # Add a newline
        fi
        echo "------------------------------------------"

        # Extract the response text using jq for the output variable
        extracted_text=$(jq -r '.candidates[0].content.parts[0].text // ""' "$gemini_response_file")

        # Output the extracted answer to the console for better visibility
        echo "üí¨ Extracted Gemini's Answer: üí¨"
        echo "------------------------------------------"
        echo "$extracted_text"
        echo "------------------------------------------"

        echo "answer<<EOF" >> "$GITHUB_OUTPUT"
        echo "$extracted_text" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
      shell: bash
